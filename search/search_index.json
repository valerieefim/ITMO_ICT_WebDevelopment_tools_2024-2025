{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"lab2/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440: import time def mark_time(func): def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\") return result return wrapper \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading, multiprocessing \u0438 async: \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f from lab_2_S2.mark_time import mark_time @mark_time def calculate_sum(n=1000000): s = 0 for i in range(1, n + 1): s += i return s if __name__ == \"__main__\": print(calculate_sum()) Threading import threading from lab_2_S2.mark_time import mark_time def calculate_part_sum(start, end, results, idx): s = 0 for i in range(start, end + 1): s += i results[idx] = s @mark_time def calculate_sum(n=1000000, n_threads=4): results = [0] * n_threads threads = [] step = n // n_threads for i in range(n_threads): start = i * step + 1 if i == n_threads - 1: end = n else: end = (i + 1) * step # \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 thread = threading.Thread( target=calculate_part_sum, args=(start, end, results, i) ) threads.append(thread) thread.start() # \u0414\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 # \u041d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432 results for thread in threads: thread.join() return sum(results) if __name__ == \"__main__\": print(calculate_sum()) Multiprocessing import multiprocessing from lab_2_S2.mark_time import mark_time def calculate_part_sum(start, end): s = 0 for i in range(start, end + 1): s += i return s @mark_time def calculate_sum(n=1000000, n_processes=4): with multiprocessing.Pool(n_processes) as pool: step = n // n_processes ranges = [ (i * step + 1, n) if i == n_processes - 1 else (i * step + 1, (i + 1) * step) for i in range(n_processes) ] # \u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b results = pool.starmap(calculate_part_sum, ranges) return sum(results) if __name__ == \"__main__\": print(calculate_sum()) Async import asyncio from lab_2_S2.mark_time import mark_time async def calculate_part_sum(start, end): s = 0 for i in range(start, end + 1): s += i return s @mark_time async def calculate_sum(n=1000000, n_steps=4): step = n // n_steps ranges = [ (i * step + 1, n) if i == n_steps - 1 else (i * step + 1, (i + 1) * step) for i in range(n_steps) ] # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b results = await asyncio.gather(*[calculate_part_sum(*range_) for range_ in ranges]) return sum(results) if __name__ == \"__main__\": print(asyncio.run(calculate_sum())) \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0446\u0438\u043a\u043b\u0430, \u0430 \u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Python, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a sum \u0438\u043b\u0438 range. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438. \u0412\u043e \u0432\u0441\u0435\u0445 \u0442\u0440\u0451\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f calculate_part_sum, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u041e\u043d\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a\u0438, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u0443\u043c\u043c\u0430\u043c\u0438. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 1 \u0434\u043e 1000000 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 n \u0440\u0430\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439, \u0433\u0434\u0435 n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e starmap \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c async \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) \u041d\u0430\u0438\u0432\u043d\u044b\u0439 14.0655 Threading 6.0552 Multiprocessing 4.2154 Async 6.1473 \u0421\u0430\u043c\u044b\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f multiprocessing. \u0415\u0441\u043b\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043c\u043d\u043e\u0433\u043e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0434\u0435\u0441\u044f\u0442\u043a\u0438 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439), \u0442\u043e: \u2022 GIL (Global Interpreter Lock) \u0432 Python \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u043c\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 threading, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0439\u0442\u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438. \u2022 async \u0442\u043e\u0436\u0435 \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442, \u0432\u0435\u0434\u044c \u044d\u0442\u043e \u043d\u0435 I/O, \u0430 \u0447\u0438\u0441\u0442\u0430\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u2014 \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u0432\u0441\u0451 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. \u2022 \u0410 \u0432\u043e\u0442 multiprocessing \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u043e\u043c Python \u0438 \u0441\u0432\u043e\u0438\u043c \u044f\u0434\u0440\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u042d\u0442\u043e \u0434\u0430\u0451\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u0432 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab2/task1/#1-threading-multiprocessing-async-python","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"lab2/task1/#_1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab2/task1/#_2","text":"\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440: import time def mark_time(func): def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\") return result return wrapper \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading, multiprocessing \u0438 async:","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab2/task1/#_3","text":"from lab_2_S2.mark_time import mark_time @mark_time def calculate_sum(n=1000000): s = 0 for i in range(1, n + 1): s += i return s if __name__ == \"__main__\": print(calculate_sum())","title":"\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f"},{"location":"lab2/task1/#threading","text":"import threading from lab_2_S2.mark_time import mark_time def calculate_part_sum(start, end, results, idx): s = 0 for i in range(start, end + 1): s += i results[idx] = s @mark_time def calculate_sum(n=1000000, n_threads=4): results = [0] * n_threads threads = [] step = n // n_threads for i in range(n_threads): start = i * step + 1 if i == n_threads - 1: end = n else: end = (i + 1) * step # \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 thread = threading.Thread( target=calculate_part_sum, args=(start, end, results, i) ) threads.append(thread) thread.start() # \u0414\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 # \u041d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432 results for thread in threads: thread.join() return sum(results) if __name__ == \"__main__\": print(calculate_sum())","title":"Threading"},{"location":"lab2/task1/#multiprocessing","text":"import multiprocessing from lab_2_S2.mark_time import mark_time def calculate_part_sum(start, end): s = 0 for i in range(start, end + 1): s += i return s @mark_time def calculate_sum(n=1000000, n_processes=4): with multiprocessing.Pool(n_processes) as pool: step = n // n_processes ranges = [ (i * step + 1, n) if i == n_processes - 1 else (i * step + 1, (i + 1) * step) for i in range(n_processes) ] # \u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b results = pool.starmap(calculate_part_sum, ranges) return sum(results) if __name__ == \"__main__\": print(calculate_sum())","title":"Multiprocessing"},{"location":"lab2/task1/#async","text":"import asyncio from lab_2_S2.mark_time import mark_time async def calculate_part_sum(start, end): s = 0 for i in range(start, end + 1): s += i return s @mark_time async def calculate_sum(n=1000000, n_steps=4): step = n // n_steps ranges = [ (i * step + 1, n) if i == n_steps - 1 else (i * step + 1, (i + 1) * step) for i in range(n_steps) ] # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b results = await asyncio.gather(*[calculate_part_sum(*range_) for range_ in ranges]) return sum(results) if __name__ == \"__main__\": print(asyncio.run(calculate_sum()))","title":"Async"},{"location":"lab2/task1/#_4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0446\u0438\u043a\u043b\u0430, \u0430 \u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Python, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a sum \u0438\u043b\u0438 range. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438. \u0412\u043e \u0432\u0441\u0435\u0445 \u0442\u0440\u0451\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f calculate_part_sum, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u041e\u043d\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a\u0438, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u0443\u043c\u043c\u0430\u043c\u0438. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 1 \u0434\u043e 1000000 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 n \u0440\u0430\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439, \u0433\u0434\u0435 n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e starmap \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c async \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445.","title":"\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435"},{"location":"lab2/task1/#_5","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) \u041d\u0430\u0438\u0432\u043d\u044b\u0439 14.0655 Threading 6.0552 Multiprocessing 4.2154 Async 6.1473 \u0421\u0430\u043c\u044b\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f multiprocessing. \u0415\u0441\u043b\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043c\u043d\u043e\u0433\u043e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0434\u0435\u0441\u044f\u0442\u043a\u0438 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439), \u0442\u043e: \u2022 GIL (Global Interpreter Lock) \u0432 Python \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u043c\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 threading, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0439\u0442\u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438. \u2022 async \u0442\u043e\u0436\u0435 \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442, \u0432\u0435\u0434\u044c \u044d\u0442\u043e \u043d\u0435 I/O, \u0430 \u0447\u0438\u0441\u0442\u0430\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u2014 \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u0432\u0441\u0451 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435. \u2022 \u0410 \u0432\u043e\u0442 multiprocessing \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u043e\u043c Python \u0438 \u0441\u0432\u043e\u0438\u043c \u044f\u0434\u0440\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u042d\u0442\u043e \u0434\u0430\u0451\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u0432 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0430\u0445.","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"lab2/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u2116 1. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432, \u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445, \u0441\u0430\u043c\u0438\u0445 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u0445. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u043b\u0438 API \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0441\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0441\u044f \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 web-\u0441\u0435\u0440\u0432\u0438\u0441, \u0438 \u0440\u0435\u0448\u0438\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0443\u0433\u043b-\u0444\u043e\u0440\u043c\u044b. \u0412 \u043d\u0435\u0439 \u043e\u043d \u0441\u043e\u0431\u0440\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d. \u041a\u0430\u043a \u0438\u0442\u043e\u0433, \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432 \u0411\u0414. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438: \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0433\u0443\u0433\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438\u0445 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0437\u0430\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u043c \u0448\u0430\u0433\u0438 3 \u0438 4 (\u0448\u0430\u0433 2 \u043e\u0441\u0442\u0430\u0432\u0438\u043c, \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u0432 \u0446\u0435\u043b\u044f\u0445 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445). \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 . \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f import time import gspread from google.oauth2.service_account import Credentials import requests def init_google_sheet(url, creds_path=\"creds.json\"): SCOPES = [\"https://www.googleapis.com/auth/spreadsheets\"] creds = Credentials.from_service_account_file(creds_path, scopes=SCOPES) gc = gspread.authorize(creds) sh = gc.open_by_url(url) return sh def get_token(username=\"dptgo\", password=\"iloveweb\"): url = \"http://localhost:8000/token/\" response = requests.post(url, data={\"username\": username, \"password\": password}) return response.json()[\"access_token\"] def get_teams(token): url = \"http://localhost:8000/teams/\" headers = {\"Authorization\": f\"Bearer {token}\"} response = requests.get(url, headers=headers) return response.json() def get_participants(token): url = \"http://localhost:8000/participants/\" headers = {\"Authorization\": f\"Bearer {token}\"} response = requests.get(url, headers=headers) return response.json() def create_team(token, team_name): url = \"http://localhost:8000/teams/\" headers = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"} data = {\"name\": team_name, \"approve_status\": \"Gathering\"} response = requests.post(url, json=data, headers=headers) if response.status_code != 200: print(\"Failed to create team:\", response.status_code, response.json()) return response.json() def parse_participant(row): return { \"full_name\": row[\"\u0424\u0418\u041e\"], \"nickname\": row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"], \"email\": row[\"E-mail\"], \"phone\": \"+\" + str(row[\"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430\"]), \"skill\": row[\"\u041e\u0442\u043c\u0435\u0442\u044c\u0442\u0435 \u0432\u0430\u0448 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u043d\u0430\u0432\u044b\u043a\"], } def create_participant(token, participant): url = \"http://localhost:8000/participants/\" headers = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"} data = parse_participant(participant) response = requests.post(url, json=data, headers=headers) if response.status_code != 200: print(\"Failed to create participant:\", response.status_code, response.json()) return response.json() def add_participant_to_team(token, team_id, participant_id): url = f\"http://localhost:8000/teams/{team_id}/participants/\" headers = {\"Authorization\": f\"Bearer {token}\"} params = {\"participant_id\": participant_id} response = requests.patch(url, params=params, headers=headers) if response.status_code != 200: print( \"Failed adding participant to team:\", response.status_code, response.json() ) return response.json() if __name__ == \"__main__\": start_time = time.time() url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} for row in data: create_participant(token, row) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } for row in data: if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]: add_participant_to_team( token, team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]], participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]], ) print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\") Threading from lab_2_S2.mark_time import mark_time from parser_naive import * from threading import Thread def create_participants(token, data, n_threads=5): def task(batch): for row in batch: create_participant(token, row) def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_threads + (len(data) % n_threads > 0) batches = list(chunks(data, batch_size)) threads = [] for batch in batches: thread = Thread(target=task, args=(batch,)) thread.start() threads.append(thread) for thread in threads: thread.join() def add_participants_to_teams( token, data, team_mapping, participants_mapping, n_threads=5 ): def task(batch): for row in batch: team_id = team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]] participant_id = participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]] add_participant_to_team(token, team_id, participant_id) def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_threads + (len(data) % n_threads > 0) batches = list(chunks(data, batch_size)) threads = [] for batch in batches: thread = Thread(target=task, args=(batch,)) thread.start() threads.append(thread) for thread in threads: thread.join() @mark_time def parse_and_save(): url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} create_participants(token, data) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } add_participants_to_teams(token, data, team_mapping, participants_mapping) if __name__ == \"__main__\": parse_and_save() Multiprocessing from lab_2_S2.mark_time import mark_time from parser_naive import * import multiprocessing def process_participants(token, batch): for row in batch: create_participant(token, row) def create_participants(token, data, n_processes=5): def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_processes + (len(data) % n_processes > 0) batches = list(chunks(data, batch_size)) with multiprocessing.Pool(n_processes) as pool: pool.starmap(process_participants, [(token, batch) for batch in batches]) def process_teams(token, batch, team_mapping, participants_mapping): for row in batch: team_id = team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]] participant_id = participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]] add_participant_to_team(token, team_id, participant_id) def add_participants_to_teams( token, data, team_mapping, participants_mapping, n_processes=5 ): def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_processes + (len(data) % n_processes > 0) batches = list(chunks(data, batch_size)) with multiprocessing.Pool(n_processes) as pool: pool.starmap( process_teams, [(token, batch, team_mapping, participants_mapping) for batch in batches], ) @mark_time def parse_and_save(): url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} create_participants(token, data) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } add_participants_to_teams(token, data, team_mapping, participants_mapping) if __name__ == \"__main__\": parse_and_save() Async import aiohttp import asyncio from parser_naive import * async def create_participant(session, token, participant): url = \"http://localhost:8000/participants/\" headers = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"} data = parse_participant(participant) async with session.post(url, json=data, headers=headers) as response: return await response.json(), response.status async def create_participants(token, data): async with aiohttp.ClientSession() as session: tasks = [ create_participant(session, token, participant) for participant in data ] await asyncio.gather(*tasks) async def add_participant_to_team(session, token, team_id, participant_id): url = f\"http://localhost:8000/teams/{team_id}/participants/\" headers = {\"Authorization\": f\"Bearer {token}\"} params = {\"participant_id\": participant_id} async with session.patch(url, params=params, headers=headers) as response: return await response.json(), response.status async def add_participants_to_teams(token, data, team_mapping, participants_mapping): async with aiohttp.ClientSession() as session: tasks = [ add_participant_to_team( session, token, team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]], participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]], ) for row in data ] await asyncio.gather(*tasks) async def parse_and_save(): url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} await create_participants(token, data) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } await add_participants_to_teams(token, data, team_mapping, participants_mapping) if __name__ == \"__main__\": start_time = time.time() asyncio.run(parse_and_save()) print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\") \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0412 \u00ab\u043d\u0430\u0438\u0432\u043d\u043e\u043c\u00bb \u043f\u0430\u0440\u0441\u0435\u0440\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0433\u0443\u0433\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c (\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 gspread, google.oauth2) \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0418\u0445 \u0432\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u044d\u0442\u0438 \u0431\u0430\u0442\u0447\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0412 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u2014 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) \u041d\u0430\u0438\u0432\u043d\u044b\u0439 4.5526 Threading 3.6526 Multiprocessing 3.9502 Async 3.5700 \u0412\u044b\u0432\u043e\u0434 \u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0438 async, \u043e\u043d\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447. Multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447, \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab2/task2/#2-","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab2/task2/#_1","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u2116 1. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432, \u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445, \u0441\u0430\u043c\u0438\u0445 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u0445. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u043b\u0438 API \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0441\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0441\u044f \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 web-\u0441\u0435\u0440\u0432\u0438\u0441, \u0438 \u0440\u0435\u0448\u0438\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0443\u0433\u043b-\u0444\u043e\u0440\u043c\u044b. \u0412 \u043d\u0435\u0439 \u043e\u043d \u0441\u043e\u0431\u0440\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d. \u041a\u0430\u043a \u0438\u0442\u043e\u0433, \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432 \u0411\u0414. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438: \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0433\u0443\u0433\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438\u0445 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0437\u0430\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u043c \u0448\u0430\u0433\u0438 3 \u0438 4 (\u0448\u0430\u0433 2 \u043e\u0441\u0442\u0430\u0432\u0438\u043c, \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u0432 \u0446\u0435\u043b\u044f\u0445 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445). \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 .","title":"\u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab2/task2/#_2","text":"import time import gspread from google.oauth2.service_account import Credentials import requests def init_google_sheet(url, creds_path=\"creds.json\"): SCOPES = [\"https://www.googleapis.com/auth/spreadsheets\"] creds = Credentials.from_service_account_file(creds_path, scopes=SCOPES) gc = gspread.authorize(creds) sh = gc.open_by_url(url) return sh def get_token(username=\"dptgo\", password=\"iloveweb\"): url = \"http://localhost:8000/token/\" response = requests.post(url, data={\"username\": username, \"password\": password}) return response.json()[\"access_token\"] def get_teams(token): url = \"http://localhost:8000/teams/\" headers = {\"Authorization\": f\"Bearer {token}\"} response = requests.get(url, headers=headers) return response.json() def get_participants(token): url = \"http://localhost:8000/participants/\" headers = {\"Authorization\": f\"Bearer {token}\"} response = requests.get(url, headers=headers) return response.json() def create_team(token, team_name): url = \"http://localhost:8000/teams/\" headers = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"} data = {\"name\": team_name, \"approve_status\": \"Gathering\"} response = requests.post(url, json=data, headers=headers) if response.status_code != 200: print(\"Failed to create team:\", response.status_code, response.json()) return response.json() def parse_participant(row): return { \"full_name\": row[\"\u0424\u0418\u041e\"], \"nickname\": row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"], \"email\": row[\"E-mail\"], \"phone\": \"+\" + str(row[\"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430\"]), \"skill\": row[\"\u041e\u0442\u043c\u0435\u0442\u044c\u0442\u0435 \u0432\u0430\u0448 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u043d\u0430\u0432\u044b\u043a\"], } def create_participant(token, participant): url = \"http://localhost:8000/participants/\" headers = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"} data = parse_participant(participant) response = requests.post(url, json=data, headers=headers) if response.status_code != 200: print(\"Failed to create participant:\", response.status_code, response.json()) return response.json() def add_participant_to_team(token, team_id, participant_id): url = f\"http://localhost:8000/teams/{team_id}/participants/\" headers = {\"Authorization\": f\"Bearer {token}\"} params = {\"participant_id\": participant_id} response = requests.patch(url, params=params, headers=headers) if response.status_code != 200: print( \"Failed adding participant to team:\", response.status_code, response.json() ) return response.json() if __name__ == \"__main__\": start_time = time.time() url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} for row in data: create_participant(token, row) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } for row in data: if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]: add_participant_to_team( token, team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]], participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]], ) print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\")","title":"\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f"},{"location":"lab2/task2/#threading","text":"from lab_2_S2.mark_time import mark_time from parser_naive import * from threading import Thread def create_participants(token, data, n_threads=5): def task(batch): for row in batch: create_participant(token, row) def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_threads + (len(data) % n_threads > 0) batches = list(chunks(data, batch_size)) threads = [] for batch in batches: thread = Thread(target=task, args=(batch,)) thread.start() threads.append(thread) for thread in threads: thread.join() def add_participants_to_teams( token, data, team_mapping, participants_mapping, n_threads=5 ): def task(batch): for row in batch: team_id = team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]] participant_id = participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]] add_participant_to_team(token, team_id, participant_id) def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_threads + (len(data) % n_threads > 0) batches = list(chunks(data, batch_size)) threads = [] for batch in batches: thread = Thread(target=task, args=(batch,)) thread.start() threads.append(thread) for thread in threads: thread.join() @mark_time def parse_and_save(): url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} create_participants(token, data) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } add_participants_to_teams(token, data, team_mapping, participants_mapping) if __name__ == \"__main__\": parse_and_save()","title":"Threading"},{"location":"lab2/task2/#multiprocessing","text":"from lab_2_S2.mark_time import mark_time from parser_naive import * import multiprocessing def process_participants(token, batch): for row in batch: create_participant(token, row) def create_participants(token, data, n_processes=5): def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_processes + (len(data) % n_processes > 0) batches = list(chunks(data, batch_size)) with multiprocessing.Pool(n_processes) as pool: pool.starmap(process_participants, [(token, batch) for batch in batches]) def process_teams(token, batch, team_mapping, participants_mapping): for row in batch: team_id = team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]] participant_id = participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]] add_participant_to_team(token, team_id, participant_id) def add_participants_to_teams( token, data, team_mapping, participants_mapping, n_processes=5 ): def chunks(lst, n): for i in range(0, len(lst), n): yield lst[i : i + n] batch_size = len(data) // n_processes + (len(data) % n_processes > 0) batches = list(chunks(data, batch_size)) with multiprocessing.Pool(n_processes) as pool: pool.starmap( process_teams, [(token, batch, team_mapping, participants_mapping) for batch in batches], ) @mark_time def parse_and_save(): url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} create_participants(token, data) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } add_participants_to_teams(token, data, team_mapping, participants_mapping) if __name__ == \"__main__\": parse_and_save()","title":"Multiprocessing"},{"location":"lab2/task2/#async","text":"import aiohttp import asyncio from parser_naive import * async def create_participant(session, token, participant): url = \"http://localhost:8000/participants/\" headers = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"} data = parse_participant(participant) async with session.post(url, json=data, headers=headers) as response: return await response.json(), response.status async def create_participants(token, data): async with aiohttp.ClientSession() as session: tasks = [ create_participant(session, token, participant) for participant in data ] await asyncio.gather(*tasks) async def add_participant_to_team(session, token, team_id, participant_id): url = f\"http://localhost:8000/teams/{team_id}/participants/\" headers = {\"Authorization\": f\"Bearer {token}\"} params = {\"participant_id\": participant_id} async with session.patch(url, params=params, headers=headers) as response: return await response.json(), response.status async def add_participants_to_teams(token, data, team_mapping, participants_mapping): async with aiohttp.ClientSession() as session: tasks = [ add_participant_to_team( session, token, team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]], participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]], ) for row in data ] await asyncio.gather(*tasks) async def parse_and_save(): url = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\" sh = init_google_sheet(url) worksheet = sh.sheet1 data = worksheet.get_all_records() token = get_token() existing_teams = get_teams(token) team_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]) for team_name in team_names: if team_name not in [team[\"name\"] for team in existing_teams]: create_team(token, team_name) teams = get_teams(token) team_mapping = {team[\"name\"]: team[\"id\"] for team in teams} await create_participants(token, data) participants = get_participants(token) participants_mapping = { participant[\"nickname\"]: participant[\"id\"] for participant in participants } await add_participants_to_teams(token, data, team_mapping, participants_mapping) if __name__ == \"__main__\": start_time = time.time() asyncio.run(parse_and_save()) print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\")","title":"Async"},{"location":"lab2/task2/#_3","text":"\u0412 \u00ab\u043d\u0430\u0438\u0432\u043d\u043e\u043c\u00bb \u043f\u0430\u0440\u0441\u0435\u0440\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0433\u0443\u0433\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c (\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 gspread, google.oauth2) \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0418\u0445 \u0432\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b. \u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u044d\u0442\u0438 \u0431\u0430\u0442\u0447\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0412 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u2014 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441\u0435\u043a) \u041d\u0430\u0438\u0432\u043d\u044b\u0439 4.5526 Threading 3.6526 Multiprocessing 3.9502 Async 3.5700","title":"\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435"},{"location":"lab2/task2/#_4","text":"\u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0438 async, \u043e\u043d\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447. Multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447, \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"lab3/lab3/","text":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 FastAPI \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 Celery \u0432 Docker \u0426\u0435\u043b\u044c \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 Celery \u0438 Redis. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u041f\u0440\u043e\u0435\u043a\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (time_manager_app) \u0421\u0435\u0440\u0432\u0438\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 (parser_service) \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL Redis \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 Celery \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432 Docker Parser Service - Dockerfile FROM python:3.13-slim RUN apt-get update && apt-get install -y \\ gcc build-essential libpq-dev \\ && rm -rf /var/lib/apt/lists/* WORKDIR /app COPY . /app RUN pip install --no-cache-dir -r /app/req.txt EXPOSE 8001 CMD [\"uvicorn\", \"api:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8001\"] Time Manager App - Dockerfile FROM python:3.11-slim RUN apt-get update && apt-get install -y \\ gcc build-essential libpq-dev \\ && rm -rf /var/lib/apt/lists/* WORKDIR /app COPY . /app RUN pip install --no-cache-dir -r /app/req.txt EXPOSE 8000 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] Docker Compose \u0434\u043b\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 services: db: image: postgres:15 container_name: postgres restart: always environment: POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres POSTGRES_DB: database volumes: - db_data:/var/lib/postgresql/data ports: - \"5432:5432\" healthcheck: test: [\"CMD\", \"pg_isready\", \"-U\", \"postgres\"] interval: 2s timeout: 3s retries: 5 redis: image: redis:7 container_name: redis ports: - \"6379:6379\" main_service: build: context: ./Lr1/ container_name: main_service command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload ports: - \"8000:8000\" depends_on: - db - parser_service environment: DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/database PARSER_URL: http://parser_service:8001 SYNC_DB_URL: postgresql+psycopg2://postgres:postgres@db:5432/database parser_service: build: context: ./Lr3/ container_name: parser_service command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload ports: - \"8001:8001\" depends_on: - redis - db environment: DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/database CELERY_BROKER_URL: redis://redis:6379/0 CELERY_RESULT_BACKEND: redis://redis:6379/0 celery_worker: build: context: ./Lr3/ container_name: celery_worker command: celery -A celery_worker worker --loglevel=info depends_on: db: condition: service_healthy parser_service: condition: service_started redis: condition: service_started environment: DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/database CELERY_BROKER_URL: redis://redis:6379/0 CELERY_RESULT_BACKEND: redis://redis:6379/0 PYTHONPATH: /app restart: on-failure volumes: db_data: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f API \u043f\u0430\u0440\u0441\u0435\u0440\u0430 Parser Service - API from fastapi import FastAPI, HTTPException from pydantic import BaseModel from celery_worker import parse, celery_app from task_2 import parser_async app = FastAPI(title=\"Parser\") class ParseRequest(BaseModel): url: str @app.post(\"/parse\") async def parse_pages(request: ParseRequest): try: await parser_async.main(request.url) return {\"message\": f\"Pages are parsed from {request.url}\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @app.post(\"/parse/trigger\") async def trigger_parse(request: ParseRequest): task = parse.delay(request.url) return {\"message\": \"Parsing started\", \"task_id\": task.id} @app.get(\"/parse/status/{task_id}\") async def get_task_status(task_id: str): result = celery_app.AsyncResult(task_id) return { \"task_id\": task_id, \"status\": result.status, \"successful\": result.successful() if result.ready() else None } \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Celery \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 Celery Worker (celery_worker.py) from celery import Celery import asyncio from task_2.parser_async import main import os from dotenv import load_dotenv load_dotenv() celery_app = Celery( \"parser\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) @celery_app.task(name=\"parse_from_url\") def parse(url: str): asyncio.run(main(url)) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c Router \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f from fastapi import APIRouter, HTTPException from pydantic import BaseModel import httpx from celery import Celery import os from dotenv import load_dotenv load_dotenv() router = APIRouter(prefix=\"/parse\", tags=[\"Parser\"]) PARSER_URL = os.getenv(\"PARSER_URL\") celery_app = Celery( \"parser_celery\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) class ParseRequest(BaseModel): url: str @router.post(\"/\") async def call_parser(request: ParseRequest): async with httpx.AsyncClient(timeout=15) as client: try: response = await client.post(f\"{PARSER_URL}/parse\", json=request.dict()) response.raise_for_status() return response.json() except httpx.HTTPStatusError as e: raise HTTPException(status_code=response.status_code, detail=response.text) @router.post(\"/async-parse\") def enqueue_parse_task(request: ParseRequest): task = celery_app.send_task(\"parse_from_url\", args=[request.url]) return {\"task_id\": task.id, \"status\": task.status, \"message\": \"Parsing started\"} @router.get(\"/status/{task_id}\") def get_task_status(task_id: str): result = celery_app.AsyncResult(task_id) return { \"task_id\": task_id, \"status\": result.status, \"successful\": result.successful() if result.ready() else None, } \u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0431\u043e\u0442\u044b \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u041f\u0430\u0440\u0441\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c : \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse/async-parse \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 Celery \u0417\u0430\u0434\u0430\u0447\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f Celery worker'\u043e\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0435\u0451 ID \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 : \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse/status/{task_id} \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 \u041f\u0440\u0438 \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u0438 \u0441\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0421\u0445\u0435\u043c\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 time_manager_app - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u043e\u0439 parser_service - \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 redis - \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 celery_worker - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 db - \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0412\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 Docker-\u0441\u0435\u0442\u0438, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044e \u0438 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab3/lab3/#fastapi-celery-docker","text":"","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 FastAPI \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 Celery \u0432 Docker"},{"location":"lab3/lab3/#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 Celery \u0438 Redis.","title":"\u0426\u0435\u043b\u044c"},{"location":"lab3/lab3/#_2","text":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (time_manager_app) \u0421\u0435\u0440\u0432\u0438\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 (parser_service) \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL Redis \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 Celery \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430"},{"location":"lab3/lab3/#1-docker","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432 Docker"},{"location":"lab3/lab3/#parser-service-dockerfile","text":"FROM python:3.13-slim RUN apt-get update && apt-get install -y \\ gcc build-essential libpq-dev \\ && rm -rf /var/lib/apt/lists/* WORKDIR /app COPY . /app RUN pip install --no-cache-dir -r /app/req.txt EXPOSE 8001 CMD [\"uvicorn\", \"api:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8001\"]","title":"Parser Service - Dockerfile"},{"location":"lab3/lab3/#time-manager-app-dockerfile","text":"FROM python:3.11-slim RUN apt-get update && apt-get install -y \\ gcc build-essential libpq-dev \\ && rm -rf /var/lib/apt/lists/* WORKDIR /app COPY . /app RUN pip install --no-cache-dir -r /app/req.txt EXPOSE 8000 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]","title":"Time Manager App - Dockerfile"},{"location":"lab3/lab3/#docker-compose","text":"services: db: image: postgres:15 container_name: postgres restart: always environment: POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres POSTGRES_DB: database volumes: - db_data:/var/lib/postgresql/data ports: - \"5432:5432\" healthcheck: test: [\"CMD\", \"pg_isready\", \"-U\", \"postgres\"] interval: 2s timeout: 3s retries: 5 redis: image: redis:7 container_name: redis ports: - \"6379:6379\" main_service: build: context: ./Lr1/ container_name: main_service command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload ports: - \"8000:8000\" depends_on: - db - parser_service environment: DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/database PARSER_URL: http://parser_service:8001 SYNC_DB_URL: postgresql+psycopg2://postgres:postgres@db:5432/database parser_service: build: context: ./Lr3/ container_name: parser_service command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload ports: - \"8001:8001\" depends_on: - redis - db environment: DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/database CELERY_BROKER_URL: redis://redis:6379/0 CELERY_RESULT_BACKEND: redis://redis:6379/0 celery_worker: build: context: ./Lr3/ container_name: celery_worker command: celery -A celery_worker worker --loglevel=info depends_on: db: condition: service_healthy parser_service: condition: service_started redis: condition: service_started environment: DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/database CELERY_BROKER_URL: redis://redis:6379/0 CELERY_RESULT_BACKEND: redis://redis:6379/0 PYTHONPATH: /app restart: on-failure volumes: db_data:","title":"Docker Compose \u0434\u043b\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432"},{"location":"lab3/lab3/#2-api","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f API \u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"lab3/lab3/#parser-service-api","text":"from fastapi import FastAPI, HTTPException from pydantic import BaseModel from celery_worker import parse, celery_app from task_2 import parser_async app = FastAPI(title=\"Parser\") class ParseRequest(BaseModel): url: str @app.post(\"/parse\") async def parse_pages(request: ParseRequest): try: await parser_async.main(request.url) return {\"message\": f\"Pages are parsed from {request.url}\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @app.post(\"/parse/trigger\") async def trigger_parse(request: ParseRequest): task = parse.delay(request.url) return {\"message\": \"Parsing started\", \"task_id\": task.id} @app.get(\"/parse/status/{task_id}\") async def get_task_status(task_id: str): result = celery_app.AsyncResult(task_id) return { \"task_id\": task_id, \"status\": result.status, \"successful\": result.successful() if result.ready() else None }","title":"Parser Service - API"},{"location":"lab3/lab3/#3-celery","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Celery \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447"},{"location":"lab3/lab3/#celery-worker-celery_workerpy","text":"from celery import Celery import asyncio from task_2.parser_async import main import os from dotenv import load_dotenv load_dotenv() celery_app = Celery( \"parser\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) @celery_app.task(name=\"parse_from_url\") def parse(url: str): asyncio.run(main(url))","title":"Celery Worker (celery_worker.py)"},{"location":"lab3/lab3/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c"},{"location":"lab3/lab3/#router","text":"from fastapi import APIRouter, HTTPException from pydantic import BaseModel import httpx from celery import Celery import os from dotenv import load_dotenv load_dotenv() router = APIRouter(prefix=\"/parse\", tags=[\"Parser\"]) PARSER_URL = os.getenv(\"PARSER_URL\") celery_app = Celery( \"parser_celery\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) class ParseRequest(BaseModel): url: str @router.post(\"/\") async def call_parser(request: ParseRequest): async with httpx.AsyncClient(timeout=15) as client: try: response = await client.post(f\"{PARSER_URL}/parse\", json=request.dict()) response.raise_for_status() return response.json() except httpx.HTTPStatusError as e: raise HTTPException(status_code=response.status_code, detail=response.text) @router.post(\"/async-parse\") def enqueue_parse_task(request: ParseRequest): task = celery_app.send_task(\"parse_from_url\", args=[request.url]) return {\"task_id\": task.id, \"status\": task.status, \"message\": \"Parsing started\"} @router.get(\"/status/{task_id}\") def get_task_status(task_id: str): result = celery_app.AsyncResult(task_id) return { \"task_id\": task_id, \"status\": result.status, \"successful\": result.successful() if result.ready() else None, }","title":"Router \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"lab3/lab3/#_3","text":"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u041f\u0430\u0440\u0441\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c : \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse/async-parse \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 Celery \u0417\u0430\u0434\u0430\u0447\u0430 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f Celery worker'\u043e\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0435\u0451 ID \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 : \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 /parse/status/{task_id} \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 \u041f\u0440\u0438 \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u0438 \u0441\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab3/lab3/#_4","text":"time_manager_app - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u043e\u0439 parser_service - \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 redis - \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 celery_worker - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 db - \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0412\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 Docker-\u0441\u0435\u0442\u0438, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044e \u0438 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.","title":"\u0421\u0445\u0435\u043c\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432"}]}